import axios from 'axios';

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

export interface AIResponse {
  answer: string;
  error?: string;
}

export const getChampionAnalysis = async (
  championName: string,
  question: string
): Promise<AIResponse> => {
  try {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Gemini API key is not configured');
    }

    const getOptimizedPrompt = (championName: string, question: string): string => {
      // Base prompt with formatting instructions
      const basePrompt = `You are an expert Marvel Contest of Champions (MCOC) strategy guide. Answer concisely with emojis, bullet points, and clear formatting.

Champion: ${championName}
Question: ${question}

Format your response as follows:`;

      // Question-specific prompts
      if (question.includes('good against') || question.includes('ideal matchups')) {
        return `${basePrompt}

üéØ **STRONG AGAINST:**
‚Ä¢ **Champion Name 1** - Brief reason why
‚Ä¢ **Champion Name 2** - Brief reason why

üí° **KEY MATCHUP TIPS:**
‚Ä¢ Specific strategy point
‚Ä¢ Important timing/technique

‚ö° **BEST SCENARIOS:**
‚Ä¢ When to use this champion`;
      }
      
      if (question.includes('bad against') || question.includes('should be avoided')) {
        return `${basePrompt}

‚ùå **WEAK AGAINST:**
‚Ä¢ Champion Name 1** - Brief reason why
‚Ä¢ **Champion Name 2** - Brief reason why

‚ö†Ô∏è **AVOID WHEN:**
‚Ä¢ Specific scenarios to avoid

üõ°Ô∏è **DEFENSIVE TIPS:**
‚Ä¢ How to minimize weaknesses`;
      }

      if (question.includes('key abilities') || question.includes('playstyle')) {
        return `${basePrompt}

‚ö° **KEY ABILITIES:**
‚Ä¢ Ability 1 - Brief description
‚Ä¢ Ability 2 - Brief description

üéÆ **PLAYSTYLE:**
‚Ä¢ Main strategy approach
‚Ä¢ Combat rhythm/timing

üî• **DAMAGE ROTATION:**
‚Ä¢ Step 1
‚Ä¢ Step 2
‚Ä¢ Step 3`;
      }

      if (question.includes('signature abilities') || question.includes('awakened')) {
        return `${basePrompt}

üåü **SIGNATURE ABILITY:**
‚Ä¢ What it does
‚Ä¢ Why it's important

üìà **AWAKENING PRIORITY:**
‚Ä¢ High/Medium/Low priority
‚Ä¢ Reasoning

üíé **SIG STONE INVESTMENT:**
‚Ä¢ Recommended signature level`;
      }

      if (question.includes('best strategy')) {
        return `${basePrompt}

üéØ **OPTIMAL STRATEGY:**
‚Ä¢ Primary approach
‚Ä¢ Secondary tactics

‚ö° **DAMAGE SEQUENCE:**
‚Ä¢ Opening moves
‚Ä¢ Mid-fight tactics
‚Ä¢ Finishing moves

üõ°Ô∏è **DEFENSIVE TIPS:**
‚Ä¢ How to stay safe`;
      }

      if (question.includes('Alliance War') || question.includes('Alliance Quest')) {
        return `${basePrompt}

üèõÔ∏è **ALLIANCE WAR:**
‚Ä¢ Best attack/defense role
‚Ä¢ Ideal war placement

üó∫Ô∏è **ALLIANCE QUEST:**
‚Ä¢ Map sections where effective
‚Ä¢ Energy efficiency

üéØ **TEAM SYNERGIES:**
‚Ä¢ Best war/quest teammates`;
      }

      if (question.includes('masteries')) {
        return `${basePrompt}

üî• **ESSENTIAL MASTERIES:**
‚Ä¢ Must-have mastery 1
‚Ä¢ Must-have mastery 2

üí° **RECOMMENDED SETUP:**
‚Ä¢ Offense masteries
‚Ä¢ Defense masteries

‚ö° **PRIORITY ORDER:**
‚Ä¢ First priority
‚Ä¢ Second priority`;
      }

      if (question.includes('synergy teams')) {
        return `${basePrompt}

ü§ù **BEST TEAM COMPOSITIONS:**
‚Ä¢ **Team 1:** Champion names + synergy effect
‚Ä¢ **Team 2:** Champion names + synergy effect

üåü **KEY SYNERGIES:**
‚Ä¢ Specific synergy benefit
‚Ä¢ How it enhances performance

üéØ **TEAM ROLES:**
‚Ä¢ Where ${championName} fits best`;
      }

      if (question.includes('base stats') || question.includes('7 star')) {
        return `${basePrompt}

üìä **7-STAR BASE STATS (Rank 1):**
‚Ä¢ Health: ~XX,XXX
‚Ä¢ Attack: ~X,XXX
‚Ä¢ Critical Rating: ~XXX

üìà **NOTABLE STATS:**
‚Ä¢ Standout attributes
‚Ä¢ Comparison to similar champions

‚≠ê **STAT PRIORITIES:**
‚Ä¢ Most important stats for this champion`;
      }

      // Default format for other questions
      return `${basePrompt}

üìã **ANSWER:**
‚Ä¢ Key point 1
‚Ä¢ Key point 2
‚Ä¢ Key point 3

üí° **PRO TIPS:**
‚Ä¢ Advanced tip 1
‚Ä¢ Advanced tip 2`;
    };

    const prompt = getOptimizedPrompt(championName, question);

    const response = await axios.post(
      `${GEMINI_API_URL}?key=${apiKey}`,
      {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ]
      },
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    return {
      answer: response.data.candidates[0].content.parts[0].text.trim()
    };
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    
    if (axios.isAxiosError(error)) {
      return {
        answer: '',
        error: error.response?.data?.error?.message || 'Failed to get analysis from Gemini'
      };
    }
    
    return {
      answer: '',
      error: 'An unexpected error occurred'
    };
  }
};